РОЗРОБКА ПЗ
Процес який може включати безліч компонентів 
Складові РПЗ(Розробки ПЗ):
1. Визначення проблеми
2. Вироблення вимог (один з основних, треба коректні вимоги)
3. Створення плану конструювання
4. Розробка архітектури ПЗ або високорівневе проектування
5. Детальне проектування
6. Кодування та налагодження
7. Блочне(модульне) тестування
8. Інтеграційне тестування
9. Інтеграція (впровадження ПЗ)
10. Тестування системи (на компі замовника)
11. Коригуючий супровід

Термін конструювання ПЗ описує детальне створення робочої програмної системи за 
допомогою комбінації кодування, верифікації, модульного тестування, інтеграційного тестування і налагодження

Головним компонентом конструювання є кодування і налагодження однак воно включає і детальне проектування
Та тестування по блокам

Область конструювання ПЗ тісно повʼязана з іншими областями SWEBOK (Software Engineering Body of Knowledge)
В процесі конструювання зазвичай створюється більша частина активів програмного проєкту. Тому в реальних проєктах просто неможливо розглядати діяльність з конструювання без конфігураційного управління.
Ще одне поняття конструювання ПЗ: створення, проектування, працюючого ПЗ, залучення методів верифікації/валідації

Область знань конструювання ПЗ (по SWEBOK):
1. Зниження складності
2. Попередження відхилень від стилю
3. Структуризація для перевірок
4. Використання зовнішніх стандартів
ОСНОВУ КПЗ становить попередження відхилень від стилю яке забезпечується застосуванням найбільш відповідних стилів конструювання ПЗ і використання зовнішніх стандартів
Які є ж стилі?
1. Лінгвістичний стиль (один з найважливіших, використання словесних інструкцій і виразів для перегляду окремих елементів або конструкцій програми. Він використовується при конструюванні нескладних конструкцій і може бути приведений до виду традиційних функцій і процедур логічному і функціональному їх програмуванню
2. Формальний стиль (використовується для точного, однозначного і формального визначення компонентів системи. Ви і замовник мають точно знати що ви написали. У результаті його застосування забезпечується конструювання складних систем з мінімальною кількістю помилок які можуть виникнути у звʼязку з неоднозначністю визначень або узагальнень при конструюванні ПЗ неформальними методами)
3. Візуальний стиль (Важливий для замовника) (є найбільш універсальним стилем конструювання ПЗ. Він дозволяє розробникам проєкту представляти в наочному вигляду складні програмні конструкції. Є 2 варіанти цього стилю: Шаблони інтерфейсу UI/UX, і саме візуальне представлення ПЗ UML (use case diagram)
Наприклад, графічний інтерфейс користувача звільняє розробника від підбору необхідних координат і властивостей обʼєктів інтерфейсу. Візуальна мова проектування UML надає розробнику набір зручних діаграм для завдання статичної та динамічної структури ПЗ. При застосуванні візуального стилю конструювання створюються текстовий і діаграмний опис структури ПЗ, який виводиться не тільки для їх розгляду, але й коригування.

Управління конструюванням базується на моделях конструювання планування та внесеннях змін
Водоспад непопулярний, популярне agile програмування
Моделі конструювання містять набір операцій, послідовності дій і результати.
види моделей визначаються стандартом життєвого циклу, методологіями та практиками
Основні стандарти орієнтовані на екстремальне програмування і Rational Unified Process
￼
Планування полягає у визначенні порядку створення компонентів і методів забезпечення якості.

Вимірювання в конструюванні орієнтоване на кількісну оцінку обсягу коду (метрики), ступеню використання програмних інформаційних систем та комплексів. Ймовірність появи дефектів(неправильно запрограмовано). 
Внесення змін приводиться з метою збереження функціональної цілісності системи та рефакторингу коду на основі проведеного метричного аналізу необхідності виконання змін в ПЗ яке конструюється.


8 лютого 2024
Планування конструювання ПЗ
Процес роботи з вимогами
технічне завдання на розробку
що таке хороша і погана специфікація

Етапи підготовки до конструювання ПЗ:
Як і в будівництві, кінцевий успіх програмного проекту багато в чому визначається до початку конструювання. Якщо фундамент ненадійний або планування виконано недбало, на етапі конструювання ви в кращому випадку зможете тільки звести шкоду до мінімуму.
Важливість виконання попередніх умов
Спільною рисою всіх програмістів, що створюють високоякісне ПЗ, є використання високоякісних методів, що ставлять наголос на якості ПЗ на самому початку, середині і наприкінці проекту.
Якщо підкреслюється якість в кінці проекту, це припадає на етап тестування системи.
Якщо приділяється підвищена увага якості всередині роботи над проектом, підкреслюються методи конструювання.
Якщо підкреслюється якість на початку проекту, тоді якісно виконується планування, визначення вимог і проектування.

Конструювання - середній етап роботи, тому до початку конструювання успіх проекту вже частково зумовлений. І все ж під час конструювання розробники хоча б повинні бути в змозі визначити, наскільки вдалою є ситуація, і повернутися назад, якщо це потрібно.
Підготовка до проекту - одна з головних умов ефективного програмування, і це логічно. Обсяг планування залежить від масштабу проекту.
3 управлінської точки зору, планування передбачає визначення термінів, числа людей і компʼютерів, необхідних для виконання робіт.
З технічної - планування це одержання представлення про створювану систему, що дозволяє не витратити гроші на створення невірної системи.

Перша попередня умова, яку потрібно виконати перед конструюванням, - ясне формулювання проблем, яку система повинна вирішувати. Це ще іноді називають «баченням продукції», «формулюванням точки зору», «формулюванням завдання» або «визначенням продукції». Визначення проблеми передує виробленню детальних вимог, яке е більш глибоким дослідженням проблеми (рис. 3). Проблему слід формулювати мовою, зрозумілою користувачеві, а сама проблема повинна бути описана з користувацької точки зору.

Вимоги докладно описують, що повинна робити програмна система, а їх формулювання - перший крок до вирішення проблеми. Формулювання вимог також відоме як «розробка вимог», «аналіз вимог», «аналіз», «визначення вимог», «специфікація», «функціональна специфікація».
Важливість явного набору вимог пояснюється кількома причинами
1. Явні вимоги допомагають гарантувати, що функціональність системи визначається користувачем, а не програмістом
2. Увага до вимог допомагає звести до мінімуму зміни системи після початку розробки. Виявивши при кодуванні 
помилку в коді, розробник змінить кілька рядків, і робота продовжиться. Якщо ж під час кодування знайдено помилку
у вимогах, доведеться змінити проект програми, щоб він відповідав зміненим вимогам. Можливо, при цьому,
доведеться відмовитися від частини старого проекту, з оскільки відповідно до неї вже написаний деякий код, на
реалізацію нового проекту піде більше часу, ніж могло б. Також повинні будете відмовитися від коду і тестів, на які
вплинула зміна вимог, і написати іх наново. Навіть код, що залишився недоторканим, потрібно буде заново протестувати для гаранті того, що зміна не призвела до появи нових помилок.

Адекватне визначення вимог - одна з найважливіших умов успіху проекту, можливо, навіть більш важливе, ніж використання ефективних методів конструювання.
Дослідження, проведені в різноманітних компаніях, показали, що при реалізації середнього проекту вимоги під час розробки змінюються приблизно на 25%, на що припадає 70-85% обсягу повторної роботи над типовим проектом.
Наступні дії дозволяють максимально легко перенести зміни вимог під час
конструювання:
1. Оцініть якість вимог за допомогою контрольного списку.
2. Переконайтесь, що всім відома ціна зміни вимог.
   3. Задайте процедуру контролю змін.
   4. Використовуйте ті підходи до розробки, які адаптуються до змін.
5. Памʼятайте про бізнес-моделі проекту.



ПРОЕКТУВАННЯ ПРИ КОНСТРУЮВАННІ 14.02.2024 (лекція 4)
ПЛАН ЛЕКЦІЇ:
1.    Проблеми, повʼязані з проектуванням ПЗ при конструюванні
2.    Основні концепції проектування при конструюванні ПЗ
3.    Рівні проектування при конструюванні ПЗ
4.    Компоненти проектування: евристичні принципи

«Проектування» може виражатися в:
-   простому написанні інтерфейсу класу на псевдокоді до розробки його деталей;
-   малюванні діаграм відносин декількох класів перед написанням їх коду:
  -    обговоренні оптимального шаблону проектування разом з колегою.
Проблеми, повʼязані з проєктуванням ПЗ при конструюванні
Під «проектуванням ПЗ» розуміють розробку або винахід схеми перетворення специфікації програми у готовий додаток. Проєктування - це той процес, який повʼязує вироблення вимог з кодуванням і налагодженням.
Структура вдалого високорівневого проєкту програми може успішно охоплювати цілий ряд більш низькорівневих проєктів при конструюванні. Проєктування корисно при роботі над невеликими додатками і необхідно при роботі над великими.

Проєктування - «брудна» проблема. Хорст Ріттель і Мелвін Веббер визначили «брудну» проблему як проблему, яку можна явно визначити тільки шляхом повного або часткового вирішення.

Проєктування - «неохайний» процес (навіть якщо воно призводить до акуратного результату). Завершений проєкт програми повинен виглядати добре організованим і ясним, але процес розробки цього проєкту зовсім не такий акуратний, як кінцевий результат.
Проєктування неохайно тому, що виконується багато невірних дій і потрапляєте в безліч тупиків, тобто здійснюєте масу помилок. У дійсності помилки є суттю проєктування: дешевше допустити помилки і виправити проєкт програми, ніж знайти їх після кодування і виправляти готовий код. Проєктування неохайно тому, що вдале рішення часто лише трохи відрізняється від невдалого.

Проєктування повʼязане з визначенням компромісів і пріоритетів. Один з найважливіших аспектів роботи проєктувальника - аналіз конкуруючих характеристик проєкту і досягнення балансу між ними. Якщо швидкість відгуку системи важливіше, ніж мінімізація часу розробки, проєктувальник вибере один варіант. Якщо на чолі кута швидкість розробки (конструювання), оптимальним може внявитися інший варіант проєкту.
Проектування передбачає обмеження можливостей. Проектування передбачає не тільки забезпечення можливостей, але і їх обмеження.
Проєктування - не детермінований процес. Спроєктувати компʼютерну програму можна десятками різних способів.
Проєктування - евристичний процес. Так як проєктування не детерміновано, методи проєктування найчастіше є евристичними методами, тобто «практичними правилами» або «способами, які можуть спрацювати», а не відтворюваними процесами, які завжди приводять до передбачуваних результатів. Проєктування - метод проб і помилок. 
Проєктування - поступовий процес. Можна досить вдало узагальнити названі аспекти проєктування, сказавши, що проєктування - «поступовий процес». Проєкти додатків не виникають у розумі розробників відразу в готовому вигляді. Вони розвиваються і поліпшуються під час оглядів, неформальних обговорень, написання коду та виконання його ревізій.