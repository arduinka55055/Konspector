@page "/projector"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Sections
@inject Konspector.Storage.ProjectProvider pp
@inject IJSRuntime JSRuntime

@{
    var Kanbans = pp.project.Kanbans;
}

<SectionContent SectionName="Title">
   Projector
</SectionContent>


<div class="projector-content">
    <div class="projector-main-container" @onmouseup="(e)=>HandleMouseUp(e)" @onmousemove="(e)=>onmousemove(e)">
        <div class="projector-editor">
            <div class="projector-add-column">
                <button class="projector-add-column-button" @onclick="(e)=>{Kanbans.Add(new Storage.KanbanColumn());}">+ Add Column</button>
            </div>
            <div class="main"> 
                @foreach (var kanban in Kanbans)
                {
                    <div class="kanban-column">
                        <div class="kanban-column-header">
                            <div class="kanban-column-title">@kanban.Title</div>
                            <div class="kanban-column-delete" @onclick="(e)=>{Kanbans.Remove(kanban);}"><i class="fa fa-trash"></i></div>
                        </div>
                        <div class="kanban-column-body" id="@kanban.GetHashCode()">
                            @foreach (var item in kanban.Items)
                            {
                                <div class="kanban-item" draggable="false" id="@(item.GetHashCode())" 
                                @onmousedown="(e)=>HandleMouseDown(kanban, item)">
                                    <div class="kanban-item-head">
                                        <input type="text" class="kanban-editable" @bind=item.Title disabled="@isDrag"/>
                                        <div class="kanban-item-delete" @onclick="(e)=>{kanban.Items.Remove(item);}"><i class="fa fa-trash"></i></div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="kanban-column-footer">
                            <button class="kanban-add-item" @onclick="(e)=>{kanban.Items.Add(new Storage.KanbanItem());}">+ Add Item</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<script>
    function DOMRect(id) {
        var element = document.getElementById(id);
        return element.getBoundingClientRect();
    }

    function grab(el)
    {
        el = document.getElementById(el);
        window.movingEl = el;
        let box = el.getBoundingClientRect();
        //set width and height to prevent element from resizing
        el.style.width = box.width + 'px';
        el.style.height = box.height + 'px';
        el.style.position = 'absolute';
    }

    function moveTo(el,x,y)
    {
        el = document.getElementById(el);
        //debugger;
        let box = el.getBoundingClientRect();
        el.style.left = x - box.width / 2 + 'px';
        el.style.top = y - box.height / 2 + 'px';
    }

    function release(el)
    {
        window.movingEl = null;
        el = document.getElementById(el);
        el.style.position = '';
        el.style.width = '';
        el.style.height = '';
    }

    document.body.addEventListener('mouseup', function (e) {
        //check page name
        //if (document.querySelector(".projector-label") == null) return;
        console.log('mouseup');
        console.log(window.movingEl);
        window.movingEl.style.position = '';
        window.movingEl.style.width = '';
        window.movingEl.style.height = '';
        window.movingEl = null;
    });

    function event2ParentColumn(el,x, y)
    {
        el = document.getElementById(el);
        el.style.pointerEvents = 'none';
        var elTarget = document.elementFromPoint(x, y);
        el.style.pointerEvents = '';
        if (elTarget == null)
            return null;
        while(elTarget && elTarget.classList && !elTarget.classList.contains('kanban-column-body'))
        {
            console.log(elTarget);
            elTarget = elTarget.parentElement;
        }
        if (elTarget == null)
            return null;
        console.warn(elTarget);
        console.warn(elTarget.id);
        console.warn(elTarget.toString());
        return elTarget.id.toString();
    }
    
</script>
@code {
    private Storage.KanbanItem? rememberKanban = null;
    private Storage.KanbanColumn? rememberColumn = null;
    private bool isDrag = false;
    private void HandleMouseDown(Storage.KanbanColumn column, Storage.KanbanItem item)
    {
        if (!isDrag) return;
        rememberKanban = item;
        rememberColumn = column;
        JSRuntime.InvokeVoidAsync("grab", item.GetHashCode());
    }

    class Rect
    {
        public double x { get; set; }
        public double y { get; set; }
        public double width { get; set; }
        public double height { get; set; }
        public double top { get; set; }
        public double right { get; set; }
        public double bottom { get; set; }
        public double left { get; set; }
    }

    private async void onmousemove(MouseEventArgs e)
    {
        try
        {
            //call js onmousemove
            if (rememberKanban != null)
            await JSRuntime.InvokeVoidAsync("moveTo", rememberKanban.GetHashCode(), e.ClientX, e.ClientY);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async void HandleMouseUp(MouseEventArgs e)
    {
        try
        {
            if (rememberKanban != null && rememberColumn != null)
            {
                //get element from point, then get it's KanbanColumn
                var ColumnEl = await JSRuntime.InvokeAsync<string>("event2ParentColumn",rememberKanban.GetHashCode(), e.ClientX, e.ClientY);
                var column = pp.project.Kanbans.FirstOrDefault(k => k.GetHashCode().ToString() == ColumnEl);
                if (column == null)
                {
                    column = rememberColumn; //then it will just move it up down
                    /*
                    await JSRuntime.InvokeVoidAsync("release", rememberKanban.GetHashCode());
                    rememberKanban = null;
                    rememberColumn = null;
                    return;*/
                }


                if (column.Items.Count == 0)
                {
                    column.Items.Add(rememberKanban);
                    rememberColumn.Items.Remove(rememberKanban);
                    await JSRuntime.InvokeVoidAsync("release", rememberKanban.GetHashCode());
                    StateHasChanged();
                    rememberKanban = null;
                    rememberColumn = null;
                    return;
                }
                //compute new index based on mouse position
                //compute boundingclientrect of column
                List<double> positions = new List<double>();
                foreach (var item in column.Items)
                {
                     //"{"x":280,"y":376,"width":236.95,"height":92,"top":376,"right":516.95,"bottom":468,"left":280}"
                     Rect rect = await JSRuntime.InvokeAsync<Rect>("DOMRect", [item.GetHashCode()]);
                     if (rect != null)
                           positions.Add((double)(rect.bottom + 0* rect.height / 2));
                }
                double mouseY = e.ClientY;
                int index = 0;
                for (int i = 0; i < positions.Count; i++)
                {
                    if (mouseY > positions[i])
                    {
                        index = i + 1;
                    }
                }

                index = Math.Min(index, column.Items.Count - 1);

                rememberColumn.Items.Remove(rememberKanban);
                column.Items.Insert(index, rememberKanban);
                await JSRuntime.InvokeVoidAsync("release", rememberKanban.GetHashCode());
                StateHasChanged();




                rememberKanban = null;
                rememberColumn = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}