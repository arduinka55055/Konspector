
@page "/counter"
@using Konspector.Misc
@inject IJSRuntime JSRuntime
<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<input type="number" @bind="currentCount" />
<!--huge editable text area-->
<textarea class="form-control" rows="10" @bind="@quote"></textarea>
<button class="btn btn-primary" @onclick="lol">Click me</button>
<button class="btn btn-primary" @onclick="cts.Cancel">Cancel</button>

<div @ref="_inputElement" contenteditable="true" @onchange="HandleChange" @onkeydown="HandleKeyDown" class="HTMLContent">
    @((MarkupString)test)
</div>
<button class="btn btn-primary" @onclick="BoldText">Bold</button>

@code {

    public class SelectionRange
    {
        public int Start { get; set; }
        public int End { get; set; }
    }

    private ElementReference _inputElement;
    private string quote = "test";
    private string quotee = "test";
    private MarkupString test = new MarkupString("<p>Test</p>");
    CancellationTokenSource cts = new CancellationTokenSource();
    private int currentCount = 0;

    private async void IncrementCount() {
        currentCount++;
        var result = await OpenFile.PickDefault();
        Console.WriteLine(result);
        if (result == null)
        {
            return;
        }
        using var stream = await result.OpenReadAsync();
        var buffer = new byte[stream.Length];
        await stream.ReadAsync(buffer.AsMemory(0, buffer.Length));
        var content = System.Text.Encoding.UTF8.GetString(buffer);
        Console.WriteLine($"File content: {content}");
        //set DOM to html content
        test = (MarkupString)content;
        StateHasChanged();
    }
    private async void lol()
    {
        Interfaces.ITextGenerator generator = new Services.OllamaGenerator();
        await generator.GenerateTextS("why is the sky blue?", async (System.Text.StringBuilder s) => {
            quote=s.ToString();
            await Task.Delay(10);
            StateHasChanged();
        }, cts.Token);
        //indicate that the operation is complete
        cts.Dispose();
        cts = new CancellationTokenSource();
        //update the UI
        StateHasChanged();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        // Handle keydown events, e.Key will give you the key pressed
        if (e.CtrlKey && e.Key == "z")
        {
            // ctrl z - for now just add NOTIMPL str
           test = new MarkupString(test.Value + "NOTIMPL_CTRLZ");
        }
        Console.WriteLine(e.Key);
        test = new MarkupString(test.Value + e.Key);
        //update the UI
        StateHasChanged();
    }

    private void HandleChange(ChangeEventArgs e)
    {
        // Handle change events, e.Value will give you the new value
        Console.WriteLine(e.Value);
        test = new MarkupString(e.Value.ToString());
    }
   //bold selected text when button is clicked
    private async Task BoldText()
    {
        //get selected text
        var idx = await GetSelectionStartEnd();
        //bold it
        var initial = test.Value;
        test = new MarkupString(initial.Insert(idx.Start, "<b>").Insert(idx.End + 3, "</b>"));

        //update the UI
        StateHasChanged();
    }
    private async Task<SelectionRange> GetSelectionStartEnd()
    {
       /*
       1. check window.getSelection().anchorNode class
       2. get start and end of selection via window.getSelection().anchorOffset and window.getSelection().focusOffset
         3. return start and end
         */
        //js interop\
         var result = await JSRuntime.InvokeAsync<System.Text.Json.JsonElement>("getSelectionStartEnd", [_inputElement]);
        //extract start and end from Selection object
        //var start = await result.InvokeAsync<int>("getStart");
        //var end = await result.InvokeAsync<int>("getEnd");
        return new SelectionRange { Start = result.GetProperty("start").GetInt32(), End = result.GetProperty("end").GetInt32() };
    }

}
