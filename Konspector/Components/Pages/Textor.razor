@page "/textor"
@inject Konspector.Storage.ProjectProvider pp
@inject IJSRuntime JSRuntime

@using Blazored.TextEditor
@using Microsoft.AspNetCore.Components.Sections
<SectionContent SectionName="Title">
    Textor
</SectionContent>


@code {
    Storage.MarkdownItem? chosenTextor = null;
}
@{
    var Todos = pp.project.Notes;
    if (chosenTextor == null)
    {
        chosenTextor = pp.project.Notes[0];
    }

    MarkupString firstcontent = (MarkupString)(pp.project.Notes.First().Content);

}

<div class="textor-content">
    <div class="textor-main-container">
        <div class="textor-panel">
            <input class="textor-label" type="text" @bind=chosenTextor.Title />
            <!--<button class="textor-save"> <i class="fa fa-save"></i> </button>-->
            <button class="textor-del" @onclick="(e)=>pp.project.Notes.Remove(chosenTextor)"><i class="fa fa-trash"></i></button>
            <button class="textor-add-panel" @onclick="(e)=>pp.project.Notes.Add(new Konspector.Storage.MarkdownItem())"> <i class="fa fa-plus"></i> </button>
        </div>


        <div class="textor-editor">
            <BlazoredTextEditor @ref="@QuillHtml">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </ToolbarContent>

                <EditorContent>
                    @(firstcontent)
                </EditorContent>


            </BlazoredTextEditor>
        </div>
    </div>

    <div class="textor-sidebar">
        <div class="textor-sidebar-head">
            Saved
        </div>
        <div class="textor-sidebar-list">
            @foreach (var textor in pp.project.Notes)
            {
                var highlight = textor == chosenTextor ? "active" : "";
                <div class="textor-sidebar-item @highlight" @onclick="()=>{GetHTML(chosenTextor);chosenTextor=textor;SetHTML(textor);}">
                    <i class="fa fa-file-text"></i>
                    <div class="textor-sidebar-label">@textor.Title</div>
                </div>
            }
        </div>
    </div>
</div>


@code {

    public BlazoredTextEditor QuillHtml = new BlazoredTextEditor();

    public async void GetHTML(Storage.MarkdownItem textor)
    {
        try
        {
            string QuillHTMLContent = await this.QuillHtml.GetHTML();
            textor.Content = QuillHTMLContent;
            pp.saveProject();
        }
        catch (Exception e)
        {
            Console.WriteLine("s");
        }
    }
    public async void SetHTML(Storage.MarkdownItem textor)
    {
        try
        {
            string QuillContent = textor?.Content ?? "Empty here. Write the note now!";
            await this.QuillHtml.LoadHTMLContent(QuillContent);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine("s");
        }
    }

  

}

